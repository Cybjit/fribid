#!/bin/sh

prefixSet=""
prefix="/usr/local"
execprefix=""

pluginPathSet=""
pluginPaths="/usr/lib/mozilla/plugins"

userPluginPath="$HOME/.mozilla/plugins"
userPrefix="$HOME/.local"

error=""

basedir=`dirname "$0"`

while [ "$#" != "0" ]; do
    flag="$1"
    shift
    case "$flag" in
    --help)
        echo "Usage: $0 [options]

This script creates a build configuration. The default options are to
install system-wide, into /usr/local, and use /usr/lib/mozilla/plugins
as the plugin directory.

Options:

    --help                Shows this help.
    --prefix=PATH         Sets the installation prefix. [/usr/local]
    --exec-prefix=PATH    Sets the installation prefix for executable files.
                          The default is to use the same prefix for all files.
    --plugin-path=PATH    Sets the NPAPI plugin path [/usr/lib/mozilla/plugin]
                          This option may be repeated if you want to create
                          plugin links in several places. Do not include the
                          prefix in the path.
    --current-user        Selects a per-user installation. Equivalent to:
                              --prefix=$userPrefix
                              --plugin-path=$userPluginPath
"
        exit 0
        ;;
    --prefix=*)
        prefix=${flag#--prefix=}
        prefixSet=1
        ;;
    --exec-prefix=*)
        execprefix=${flag#--exec-prefix=}
        ;;
    --plugin-path=*)
        path=${flag#--plugin-path=}
        path=${path%/}
        if [ -z "$pluginPathSet" ]; then
            pluginPathSet=1
            pluginPaths="$path"
        else
            pluginPaths="$pluginPaths $path"
        fi
        ;;
    --current-user)
        if [ -z "$prefixSet" ]; then
            prefix="$userPrefix"
        fi
        
        if [ -z "$pluginPathSet" ]; then
            pluginPathSet=1
            pluginPaths="$userPluginPath"
        else
            pluginPaths="$pluginPaths $userPluginPath"
        fi
        ;;
    --internal--get-define=*)
        name=${flag#--internal--get-define=}
        printf '#include "%s"\n%s\n' "$basedir/common/defines.h" "$name" | cpp - | sed 's/#[^\n]*//g' | tr -d '\n' | sed 's/" "//g' | tr -d '\"'
        exit 0
        ;;
    --internal--remove-link)
        link="$1"
        target="$2"
        shift 2
        [ ! -h "$link" ] || [ "`readlink "$link"`" != "$target" ] || rm -f "$link"
        exit 0
        ;;
    *)
        echo "Invalid option: $flag"
        error=1
        ;;
    esac
done

if [ ! -r "$basedir/common/defines.h" ]; then
    echo "ERROR: Source code not found."
    error=1
fi

if [ -n "$error" ]; then
    exit 2
fi


### Prefixes
prefixPath="$prefix"

if [ -z "$execprefix" ]; then
    execPath="$prefix"
else
    execPath="$execprefix"
fi

echo "Prefix: $prefixPath"
if [ -n "$execprefix" ]; then
    echo "Executable/library prefix: $execPath"
fi


### Plugin paths
hasPaths=""
for path in $pluginPaths; do
    hasPaths="1"
    if [ "$path" = "${path%/plugins}" ]; then
    	echo "WARNING: Plugin path $path doesn't end with /plugins." >&2
    elif [ -d "$path" ]; then
        echo "Plugin path: $path"
    else
    	echo "WARNING: Plugin path $path doesn't exist!"
    	if [ -z "$pluginPathSet" ]; then
            echo "         You may need to change it with the --plugin-path=... option." >&2
        fi
    fi
done

if [ -z "$hasPaths" ]; then
    echo "No plugin paths specified."
fi


### Write configuration
CONFFILE="$basedir/common/config.h"

echo "
/* This file is automatically generated.
   Run the configure script to change the configuration. */

#define PREFIX \"$prefixPath\"
#define EPREFIX \"$execPath\"
#define NPAPI_PLUGIN_PATHS \"$pluginPaths\"
" > $CONFFILE


### Display success message
cancreate() {
    if [ -w "$1" ]; then
        return 0
    elif [ ! -e "$1" ]; then
        cancreate `dirname "$1"`
        return $?
    else
        return 1
    fi
}

if cancreate "$prefixPath" && cancreate "$execPath"; then
    INSTALLCMD="make install"
else
    INSTALLCMD="sudo make install"
fi

echo "Wrote $CONFFILE."
echo "Type \"make\" to compile, and then \"$INSTALLCMD\" to install."

